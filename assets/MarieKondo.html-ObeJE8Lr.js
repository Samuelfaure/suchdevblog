import{_ as a,c as t,a as o,o as n}from"./app-wnH-bxgu.js";const i="/images/marie_kondo.webp",r={};function s(d,e){return n(),t("div",null,e[0]||(e[0]=[o('<h1 id="🧹-the-marie-kondo-guide-for-the-clean-developer" tabindex="-1"><a class="header-anchor" href="#🧹-the-marie-kondo-guide-for-the-clean-developer"><span>🧹 The Marie Kondo guide for the Clean Developer</span></a></h1><p>Marie Kondo is that Japanese woman who became famous with her method for reaching a tidy home and a tidy life.</p><p><img src="'+i+'" alt="An image showing Marie Kondo"></p><p>Her method can be summed up as:</p><p><em><strong>Throw away most of your shit.</strong></em></p><p>You don&#39;t really need it. It&#39;s holding you back. It adds to your mental load, it bloats your life and living space. Everything that doesn&#39;t make you happy (or is very useful) must be thrown away.</p><p>It&#39;s hard to describe how liberating it feels to just <em>have less</em>. It&#39;s a feeling very few people will ever actually experience.</p><p>But as humans, we are anxious creatures afraid of scarcity. So the act of throwing stuff away can be very difficult.</p><p>Why is it so hard, and why is it also so important? Let&#39;s discuss.</p><h2 id="is-it-really-that-important" tabindex="-1"><a class="header-anchor" href="#is-it-really-that-important"><span>Is it really that important?</span></a></h2><p>Yes. But you can&#39;t really know this if you never experimented both sides: the clean and the dirty. As I explain in <a href="/opinions/TechnicalDebtKitchen">this article about the technical debt</a>, most developers never worked in the clean and don&#39;t understand just how huge the difference <em>feels</em>.</p><p>Just as throwing your shit away is important for living in a clean space, throwing your code away is important for working on a clean, debt-free codebase.</p><h2 id="removing-a-line-of-code-is-much-harder-than-adding-one" tabindex="-1"><a class="header-anchor" href="#removing-a-line-of-code-is-much-harder-than-adding-one"><span>Removing a line of code is much harder than adding one.</span></a></h2><p>Blase Pascal (<a href="https://quoteinvestigator.com/2012/04/28/shorter-letter/" target="_blank" rel="noopener noreferrer">not Mark Twain</a>) wrote :</p><p><strong>If I had more time, I would have written a shorter letter.</strong></p><p>The best code is short, DRY and simple. The least good code is long, repetitive and complex.</p><p>Adding code is easy. You have a need, you just throw code at it until the problem disappears. But more code means more maintenance, more bugs, more complexity, more problems.</p><p>Removing code is hard. You need to either accept that your need won&#39;t be fulfilled, or you have to write the best, shortest, most elegant code to fulfill that need.</p><p><strong>No code means no problems.</strong></p><h2 id="you-re-not-really-throwing-anything-away" tabindex="-1"><a class="header-anchor" href="#you-re-not-really-throwing-anything-away"><span>You&#39;re not really throwing anything away.</span></a></h2><p>Are you using Git? If not, stop reading this and go implement Git.</p><p>If you&#39;re using Git correctly, then you have a trace of every line of code ever written in your database.</p><p>Many developers will complain that it is hard to find deleted code because their Git history is a mess. When we dig to find out why they can&#39;t keep a clean commit history, we soon realize it&#39;s because their codebase is a mess.</p><p>Don&#39;t be a victim of tautology. <a href="/opinions/TechnicalDebtKitchen">A messy kitchen only attracts more mess</a>. Break the cycle and be free.</p><h2 id="marketing-vs-technical" tabindex="-1"><a class="header-anchor" href="#marketing-vs-technical"><span>Marketing VS Technical</span></a></h2><p>The marketing like new features, and for good reasons. New features are <em>good</em>. They supposedly attract new clients, and new clients are <em>good</em>. More clients means more money, and money is <em>good</em>.</p><p>Experimenting and changing to see what works and what doesn&#39;t is a great way to develop your product and achieve success. But adding a feature is like buying an air-fryer: there is a risk that you actually won&#39;t be using it.</p><p>So adding stuff is great, but you have to follow rules:</p><ul><li><p>Dont add crap to your app. Add clean, well-coded, well-polished <em>small</em> features. Go for a good little MVP (Minimum Viable Product), don&#39;t go for the huge, badly-hacked feature.</p></li><li><p>You can&#39;t keep adding stuff if you don&#39;t remove stuff. If a feature is not used by a majority of your users, you probably want to just <em>throw it away</em>.</p></li></ul><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>This article was originally about 1000 words, but since I had some time, I made it under 600.</p><p>Throw your shit away, today.</p>',32)]))}const h=a(r,[["render",s]]),c=JSON.parse('{"path":"/opinions/MarieKondo.html","title":"🧹 The Marie Kondo guide for the Clean Developer","lang":"en-US","frontmatter":{"title":"🧹 The Marie Kondo guide for the Clean Developer","description":"Wow, so clean, very productive","footer":"CC-BY-4.0 Licensed | Copyright © 2018-present by Samuel Faure <3"},"git":{"updatedTime":1761891624000,"contributors":[{"name":"Samuelfaure","username":"Samuelfaure","email":"samuel.faure.dev@gmail.com","commits":1,"url":"https://github.com/Samuelfaure"}],"changelog":[{"hash":"3e80d8aaf6dc1a00d2b2d49762569040eac3e944","time":1761891624000,"email":"samuel.faure.dev@gmail.com","author":"Samuelfaure","message":"New article: AI dev trap"}]},"filePathRelative":"opinions/MarieKondo.md"}');export{h as comp,c as data};
