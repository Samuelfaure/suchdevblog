import{_ as n,c as a,a as e,o as t}from"./app-wnH-bxgu.js";const p={};function l(o,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="ðŸ’Ž-filter-anything-in-a-rails-request-with-almost-no-code" tabindex="-1"><a class="header-anchor" href="#ðŸ’Ž-filter-anything-in-a-rails-request-with-almost-no-code"><span>ðŸ’Ž Filter anything in a Rails request with almost no code</span></a></h1><h2 id="context-what-and-why" tabindex="-1"><a class="header-anchor" href="#context-what-and-why"><span>Context (What and Why ?)</span></a></h2><p>One of my first missions in my webdev career was developing an Open Data API. Basically, you have this huge database of french companies, and what better way to support open data than building and hosting a cool Rails API where anyone can access the information ?</p><p>Since it was my first professional project, the API obviously wasn&#39;t as great as it could have been. One problem I often faced was enthusiastic users with very specialized needs. I had manually added a lot of options, but each user&#39;s needs were so specific it was often not enough.</p><p>Some time after, the data had switched format, and I used this opportunity to build a new version of the API. I decided it would be great to let the users filter their requests using any field in the database.</p><p><strong>tl;dr: Instead of bloating your controllers with filtering options, generate filters automatically based on your model&#39;s attributes !</strong></p><h2 id="introducing-has-scope" tabindex="-1"><a class="header-anchor" href="#introducing-has-scope"><span>Introducing : has_scope</span></a></h2><p>The brillant gem <a href="https://github.com/plataformatec/has_scope" target="_blank" rel="noopener noreferrer">has_scope</a> is built by the amazing team behind the famous gem Devise.</p><p>What it does : if you define an ActiveRecord scope in your models, you can allow your users to use them from your controllers.</p><p>You can go read the README, but basically, declaring <code>has_scope :is_open</code> in a Company controller and <code>scope :in_paris, -&gt;() (where(city: &#39;Paris&#39;))</code> in a Company model will allows your users to request only the companies from Paris :</p><p><code>GET /companies?in_paris</code></p><h2 id="making-it-bigger" tabindex="-1"><a class="header-anchor" href="#making-it-bigger"><span>Making it bigger</span></a></h2><p>This is all and well, but I have three tables in my database, each of them having 30 to 40 different fields. I&#39;m not going to copy-paste my scopes a hundred times.</p><p>I wrote the following controller and module concern for this purpose :</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code class="language-ruby"><span class="line"><span class="token keyword">module</span> <span class="token class-name">Scopable</span></span>
<span class="line">  <span class="token comment"># This part goes into your controllers</span></span>
<span class="line">  <span class="token keyword">module</span> <span class="token class-name">Controller</span></span>
<span class="line">    <span class="token keyword">extend</span> ActiveSupport<span class="token double-colon punctuation">::</span>Concern</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Add has_scope for each model attribute</span></span>
<span class="line">    included <span class="token keyword">do</span></span>
<span class="line">      <span class="token comment"># controller_name.classify.constantize =&gt; Get model class from controller</span></span>
<span class="line">      <span class="token comment"># You need to follow Rail&#39;s conventions for this to work</span></span>
<span class="line">      controller_name<span class="token punctuation">.</span>classify<span class="token punctuation">.</span>constantize<span class="token punctuation">.</span>attribute_names<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>a<span class="token operator">|</span></span>
<span class="line">        has_scope a<span class="token punctuation">.</span>to_sym<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> where<span class="token punctuation">(</span><span class="token builtin">Hash</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token symbol">:show</span></span>
<span class="line">      <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># This part goes into your models</span></span>
<span class="line">  <span class="token keyword">module</span> <span class="token class-name">Model</span></span>
<span class="line">    <span class="token keyword">extend</span> ActiveSupport<span class="token double-colon punctuation">::</span>Concern</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Add scope for each model attribute</span></span>
<span class="line">    included <span class="token keyword">do</span></span>
<span class="line">      <span class="token comment"># Getting the model from itself is easier !</span></span>
<span class="line">      <span class="token keyword">self</span><span class="token punctuation">.</span>attribute_names<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>a<span class="token operator">|</span></span>
<span class="line">        scope a<span class="token punctuation">.</span>to_sym<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> where<span class="token punctuation">(</span><span class="token builtin">Hash</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To use it, just include the right concern in model and controller :</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code class="language-ruby"><span class="line"><span class="token comment"># Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token operator">&lt;</span> ApplicationRecord</span>
<span class="line">  <span class="token keyword">include</span> Scopable<span class="token double-colon punctuation">::</span>Model</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code class="language-ruby"><span class="line"><span class="token comment"># Controller</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CompanyController</span> <span class="token operator">&lt;</span> ApplicationController</span>
<span class="line">  <span class="token keyword">include</span> Scopable<span class="token double-colon punctuation">::</span>Controller</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">show</span></span></span>
<span class="line">    results <span class="token operator">=</span> apply_scopes<span class="token punctuation">(</span>Company<span class="token punctuation">)</span><span class="token punctuation">.</span>all</span>
<span class="line">    render json<span class="token operator">:</span> results<span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token number">200</span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now your users can filter any requests from any fields !</p><h2 id="security" tabindex="-1"><a class="header-anchor" href="#security"><span>Security</span></a></h2><p><code>has_scope</code> disallows use of hashes or arrays by default (although it is still possible to use them, as long as you predefine them). This removes the need for defining strong params.</p><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing"><span>Testing</span></a></h2><p>The <code>Scopable</code> module is model-agnostic. Obviously, the tests should be as well. Now the best way would be to test it with a fake test class, but this would require registering a fake table in the test database, which is icky.</p><p>The other best way is to use Rspec&#39;s shared_examples :</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code class="language-ruby"><span class="line"><span class="token comment"># Need to pass in arguments the tested model, and two fields to test the filtering</span></span>
<span class="line">shared_examples <span class="token string-literal"><span class="token string">&#39;scopable&#39;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>model<span class="token punctuation">,</span> field_1<span class="token punctuation">,</span> field_2<span class="token operator">|</span></span>
<span class="line">  describe <span class="token string-literal"><span class="token string">&#39;#show&#39;</span></span><span class="token punctuation">,</span> <span class="token symbol">type</span><span class="token operator">:</span> <span class="token symbol">:request</span> <span class="token keyword">do</span></span>
<span class="line">    let<span class="token operator">!</span><span class="token punctuation">(</span><span class="token symbol">:instance_1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> create<span class="token punctuation">(</span>model<span class="token punctuation">,</span> field_1 <span class="token operator">=&gt;</span> <span class="token string-literal"><span class="token string">&#39;001&#39;</span></span><span class="token punctuation">,</span> field_2 <span class="token operator">=&gt;</span> <span class="token string-literal"><span class="token string">&#39;Foo&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    let<span class="token operator">!</span><span class="token punctuation">(</span><span class="token symbol">:instance_2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> create<span class="token punctuation">(</span>model<span class="token punctuation">,</span> field_1 <span class="token operator">=&gt;</span> <span class="token string-literal"><span class="token string">&#39;002&#39;</span></span><span class="token punctuation">,</span> field_2 <span class="token operator">=&gt;</span> <span class="token string-literal"><span class="token string">&#39;Bar&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    let<span class="token operator">!</span><span class="token punctuation">(</span><span class="token symbol">:instance_3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> create<span class="token punctuation">(</span>model<span class="token punctuation">,</span> field_1 <span class="token operator">=&gt;</span> <span class="token string-literal"><span class="token string">&#39;003&#39;</span></span><span class="token punctuation">,</span> field_2 <span class="token operator">=&gt;</span> <span class="token string-literal"><span class="token string">&#39;Bar&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    it <span class="token string-literal"><span class="token string">&#39;can filter with 1 field&#39;</span></span> <span class="token keyword">do</span></span>
<span class="line">      get <span class="token string-literal"><span class="token string">&quot;/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">model<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">field_1<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">=001&quot;</span></span></span>
<span class="line"></span>
<span class="line">      expect<span class="token punctuation">(</span>json_response<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>to eq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      expect<span class="token punctuation">(</span>json_response<span class="token punctuation">.</span>first<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">field_1<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to eq<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;001&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    it <span class="token string-literal"><span class="token string">&#39;can filter multiple fields&#39;</span></span> <span class="token keyword">do</span></span>
<span class="line">      get <span class="token string-literal"><span class="token string">&quot;/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">model<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">field_1<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">=001&amp;</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">field_2<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">=Foo&quot;</span></span></span>
<span class="line"></span>
<span class="line">      expect<span class="token punctuation">(</span>json_response<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>to eq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      expect<span class="token punctuation">(</span>json_response<span class="token punctuation">.</span>first<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">field_1<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to eq<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;001&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    it <span class="token string-literal"><span class="token string">&#39;can return multiple results&#39;</span></span> <span class="token keyword">do</span></span>
<span class="line">      get <span class="token string-literal"><span class="token string">&quot;/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">model<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">field_2<span class="token punctuation">.</span>to_s</span><span class="token delimiter punctuation">}</span></span><span class="token string">=Bar&quot;</span></span></span>
<span class="line"></span>
<span class="line">      expect<span class="token punctuation">(</span>json_response<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>to eq<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And in the spec of any controller where you include the concern :</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb"><pre><code class="language-ruby"><span class="line"><span class="token comment"># Specs for CompanyController</span></span>
<span class="line"><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">&#39;rails_helper&#39;</span></span></span>
<span class="line"></span>
<span class="line">describe CompanyController <span class="token keyword">do</span></span>
<span class="line">  it_behaves_like <span class="token string-literal"><span class="token string">&#39;scopable&#39;</span></span><span class="token punctuation">,</span> <span class="token symbol">:company</span><span class="token punctuation">,</span> <span class="token symbol">:id</span><span class="token punctuation">,</span> <span class="token symbol">:name</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don&#39;t forget also to index on your fields, or your requests will be very slow !</p><p>Hope you liked this bit of code !</p>`,29)]))}const c=n(p,[["render",l]]),r=JSON.parse('{"path":"/tutorials/FilterAnythingInRails.html","title":"ðŸ’Ž Filter Anything in a Rails request in 10 lines of code","lang":"en-US","frontmatter":{"title":"ðŸ’Ž Filter Anything in a Rails request in 10 lines of code","description":"Wow Rails, Has scope, Very powerful","footer":"CC-BY-4.0 Licensed | Copyright Â© 2018-present by Samuel Faure <3"},"git":{"updatedTime":1761891624000,"contributors":[{"name":"Samuelfaure","username":"Samuelfaure","email":"samuel.faure.dev@gmail.com","commits":1,"url":"https://github.com/Samuelfaure"}],"changelog":[{"hash":"3e80d8aaf6dc1a00d2b2d49762569040eac3e944","time":1761891624000,"email":"samuel.faure.dev@gmail.com","author":"Samuelfaure","message":"New article: AI dev trap"}]},"filePathRelative":"tutorials/FilterAnythingInRails.md"}');export{c as comp,r as data};
