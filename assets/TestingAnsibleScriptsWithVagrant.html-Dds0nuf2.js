import{_ as a,c as n,a as e,o as t}from"./app-wnH-bxgu.js";const i={};function l(r,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="ðŸ’½-testing-ansible-scripts-without-breaking-everything-with-vagrant" tabindex="-1"><a class="header-anchor" href="#ðŸ’½-testing-ansible-scripts-without-breaking-everything-with-vagrant"><span>ðŸ’½ Testing ANSIBLE scripts without breaking everything with Vagrant</span></a></h1><p>Testing ANSIBLE scripts for server deployment might be tricky. It is easier to write complex deployment scripts aimed to deploying on clean servers. The correlation is that your script might break a server which is not clean. You might need an empty server to try your script on.</p><p>One solution is to subscribe for a free AWS server. But this solution is limited (time, available space). Another solution is renting a cheap OVH server for 3.50 euros a month, but that might not be ideal either.</p><p>A better solution is provisioning to virtual servers with Vagrant. This solution also has the benefit of being local, so we don&#39;t even need internet for running tests on our ANSIBLE playbooks.</p><p>In this example, we will provision with ANSIBLE a rails app on a virtual server, using Vagrant.</p><h2 id="step-1-install-virtualbox-vagrant" tabindex="-1"><a class="header-anchor" href="#step-1-install-virtualbox-vagrant"><span>Step 1 : Install Virtualbox / Vagrant</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> virtualbox</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> vagrant</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-2-choose-execute-your-box" tabindex="-1"><a class="header-anchor" href="#step-2-choose-execute-your-box"><span>Step 2 : Choose / execute your box</span></a></h2><p>List of boxes available <a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener noreferrer">here</a>.</p><p>We will choose Ubuntu 16.04 (Xenial) :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">vagrant init ubuntu/xenial64</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You should have a directory vagrant_virtual_drives in your home, containing a log and a Vagrantfile. Go here and execute :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">vagrant up</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Check if everything works correctly by connecting to your virtual machine in SSH :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">vagrant <span class="token function">ssh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="step-3-configuring-vagrantfile-for-being-provisioned-by-ansible-forwarding-rails-port-3000" tabindex="-1"><a class="header-anchor" href="#step-3-configuring-vagrantfile-for-being-provisioned-by-ansible-forwarding-rails-port-3000"><span>Step 3 : configuring Vagrantfile for being provisioned by ANSIBLE / Forwarding Rails port 3000</span></a></h2><p>Add this to your Vagrantfile :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Vagrant.configure<span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span></span>
<span class="line">  <span class="token comment"># Forward port 3000 to localhost so you can access your rails app in your browser</span></span>
<span class="line">  config.vm.network <span class="token string">&quot;forwarded_port&quot;</span>, guest: <span class="token number">3000</span>, host: <span class="token number">3000</span>, host_ip: <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">  <span class="token comment"># Allowing your virtual machine to be provisioned by ANSIBLE</span></span>
<span class="line">  config.vm.provision <span class="token string">&quot;ansible&quot;</span> <span class="token keyword">do</span> <span class="token operator">|</span>ansible<span class="token operator">|</span></span>
<span class="line">      ansible.playbook <span class="token operator">=</span> <span class="token string">&quot;playbook.yml&quot;</span></span>
<span class="line">  end</span>
<span class="line">end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-4-provisioning-your-vagrant-virtual-machine" tabindex="-1"><a class="header-anchor" href="#step-4-provisioning-your-vagrant-virtual-machine"><span>Step 4 : ProvisioningÂ your Vagrant virtual machine</span></a></h2><p>Add your virtual machine to your ANSIBLE inventory :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># MyAnsible/inventories/my_virtual_machine</span></span>
<span class="line"><span class="token punctuation">[</span>my<span class="token punctuation">-</span>virtual<span class="token punctuation">-</span>machine<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">127.0.0.1 ansible_port=2222 ansible_user=YourBoxUser ansible_ssh_pass=YourSSHPassword</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The IP 127.0.0.1 as well as the port (2222) are default for this box. When you vagrant up you can check if the values are correct (you can also check by running vagrant ssh-config).</p><p>Don&#39;t forget to replace YourBoxUser and YourSSHPassword. For most vagrant boxes, it should both be &quot;vagrant&quot;.Â However, for the ubuntu/Xenial box and some others, the password is randomized for security reasons. You can check the username and password in your box default settings :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">cat</span> ~/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-xenial64/20171011.0.0/virtualbox</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>20171011.0.0 is the date/version of the current box you&#39;re using. I&#39;m writing this mid-october 2017. On this box, YourBoxUser should be &quot;ubuntu&quot;.</p><p>Deploy your ansible to your virtual machine :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">ansible-playbook MyPlaybook.yml <span class="token parameter variable">-i</span> inventories/my_virtual_machine</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If all goes well, your deployment should start. You might get the following error :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">fatal: <span class="token punctuation">[</span><span class="token number">127.0</span>.0.1<span class="token punctuation">]</span>: FAILED<span class="token operator">!</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&quot;failed&quot;</span><span class="token builtin class-name">:</span> true, <span class="token string">&quot;msg&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this. Please add this host&#39;s fingerprint to your known_hosts file to manage this host.&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In that case, either manually connect with SSH first : ssh YourBoxUser@127.0.0.1 -p 2222 (you will be prompted for YourSSHPassword) You should be asked to validate a key fingerprint, accept it and you&#39;re done.</p><p>Another way to solve this error is creating in your ansible directory an ansible.cfg file with :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token punctuation">[</span>defaults<span class="token punctuation">]</span></span>
<span class="line">host_key_checking = false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The error should be gone.</p><p>Another problem might be the absence of Python 2 on your box. If that happens, create a ANSIBLE playbook to install python without python being installed :</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># python-dirty-install.yml</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all</span>
<span class="line">  <span class="token key atrule">gather_facts</span><span class="token punctuation">:</span> <span class="token boolean important">False</span></span>
<span class="line">  <span class="token key atrule">become</span><span class="token punctuation">:</span> <span class="token boolean important">True</span></span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">tasks</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install python 2</span>
<span class="line">      <span class="token key atrule">raw</span><span class="token punctuation">:</span> test <span class="token punctuation">-</span>e /usr/bin/python <span class="token punctuation">|</span><span class="token punctuation">|</span> (apt <span class="token punctuation">-</span>y update <span class="token important">&amp;&amp;</span> apt install <span class="token punctuation">-</span>y python<span class="token punctuation">-</span>minimal)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run it with ansible-playbook python-dirty-install.yml -i inventories/my-virtual-machine. You should now be able to use your other playbook.</p><h2 id="step-5-running-your-rails-server" tabindex="-1"><a class="header-anchor" href="#step-5-running-your-rails-server"><span>Step 5 : Running your Rails server</span></a></h2><p>If you did your deployment script properly, you should have your app folder on your virtual machine. Go there and launch your rails server. You need to start puma on a different port (3001) and rails on port 3000 :</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">bundle <span class="token builtin class-name">exec</span> puma <span class="token parameter variable">-C</span> config/puma.rb <span class="token parameter variable">-b</span> tcp://127.0.0.1:3001</span>
<span class="line"><span class="token function">sudo</span> rails server <span class="token parameter variable">-p</span> <span class="token number">3000</span> <span class="token parameter variable">-b</span> <span class="token number">0.0</span>.0.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Connect locally to <a href="http://localhost:3000/" target="_blank" rel="noopener noreferrer">http://localhost:3000/</a>. Congratulations, you are on Rails !</p><p>You can stop your vagrant virtual machine with vagrant halt if you want to keep it in its current state, or vagrant destroy to destroy it completely.</p>`,41)]))}const p=a(i,[["render",l]]),c=JSON.parse('{"path":"/tutorials/TestingAnsibleScriptsWithVagrant.html","title":"ðŸ’½ Testing Ansible scripts with Vagrant","lang":"en-US","frontmatter":{"title":"ðŸ’½ Testing Ansible scripts with Vagrant","description":"Very ansible, much deployment","footer":"CC-BY-4.0 Licensed | Copyright Â© 2018-present by Samuel Faure <3"},"git":{"updatedTime":1761891624000,"contributors":[{"name":"Samuelfaure","username":"Samuelfaure","email":"samuel.faure.dev@gmail.com","commits":1,"url":"https://github.com/Samuelfaure"}],"changelog":[{"hash":"3e80d8aaf6dc1a00d2b2d49762569040eac3e944","time":1761891624000,"email":"samuel.faure.dev@gmail.com","author":"Samuelfaure","message":"New article: AI dev trap"}]},"filePathRelative":"tutorials/TestingAnsibleScriptsWithVagrant.md"}');export{p as comp,c as data};
