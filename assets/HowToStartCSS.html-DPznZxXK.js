import{_ as t,c as o,a,o as n}from"./app-wnH-bxgu.js";const i={};function r(s,e){return n(),o("div",null,e[0]||(e[0]=[a('<h1 id="ðŸ˜ -how-to-start-learning-css-without-hating-yourself" tabindex="-1"><a class="header-anchor" href="#ðŸ˜ -how-to-start-learning-css-without-hating-yourself"><span>ðŸ˜  How to Start Learning CSS without hating yourself</span></a></h1><p>I&#39;ve been teaching / mentoring quite a lot of webdev students in my spare time. We start, of course, with HTML CSS. HTML goes okay, for the most part. CSS, well, less. This is due, I think, to the particularities of CSS, where it is very, very easy to shoot yourself in the foot.</p><p>The main problem is <strong>the student THINKING they got it right, when they didn&#39;t.</strong> It looks okay, therefore it is okay. Of course, as soon as the page move a pixel, everything falls apart, and you never manage to really get what you wanted in the beginning.</p><p>I&#39;m going to explain the mistakes ALL the new CSS enthusiasts make, by a simple set of rules to follow 95% of the time.</p><h2 id="rule-0-use-the-devtools" tabindex="-1"><a class="header-anchor" href="#rule-0-use-the-devtools"><span>Rule 0 : Use the devtools.</span></a></h2><p>Every modern browser comes with a set of devtools. Learn it. Use it. You can, very easily :</p><ul><li>See which CSS was applied</li><li>See computed padding, margin, border, offset of any element</li><li>See which fonts are rendered</li><li>Simulate a smaller device</li><li>Try new things directly on the browser</li></ul><p>And Much Moreâ„¢</p><h2 id="rule-1-understand-the-default-css" tabindex="-1"><a class="header-anchor" href="#rule-1-understand-the-default-css"><span>Rule 1 : Understand the default CSS.</span></a></h2><p>CSS code is a set of rules applied on the HTML to make it look good.</p><p>Every browser comes with its own set of default rules. You have to deal with them too. It also might explain a difference between your page on Firefox and on Chrome.</p><h2 id="rule-2-the-two-css-properties-to-know-perfectly" tabindex="-1"><a class="header-anchor" href="#rule-2-the-two-css-properties-to-know-perfectly"><span>Rule 2 : The two CSS properties to know perfectly.</span></a></h2><p>There are hundreds (thousands ?) of possible CSS properties. You can&#39;t learn them all right now, but you won&#39;t need most of them.</p><p>However, two of those properties you have to know PERFECTLY :</p><p><code>DISPLAY</code> and <code>POSITION</code>.</p><p>Specifically, you need to know the following <code>DISPLAY</code> properties perfectly: <code>none, initial, inherit, inline, block, flex, grid, inline-block, inline-flex, inline-grid</code>.</p><p>You need to know the following <code>POSITION</code> properties perfectly: <code>initial, inherit, static, relative, absolute, fixed, sticky</code>.</p><p>If you don&#39;t have a very good understanding of those, stop everything and come back when you do. Take all the time you need, but learn them perfectly.</p><p>Believe me, it will save yourself a LOT of time.</p><h2 id="rule-3-you-don-t-want-width-or-height-usually" tabindex="-1"><a class="header-anchor" href="#rule-3-you-don-t-want-width-or-height-usually"><span>Rule 3 : You don&#39;t want width or height (usually).</span></a></h2><p><code>width</code> and <code>height</code> are so cool ! You use them, and it fixes the height and width of the div ! So precise !</p><p>But actually you don&#39;t want to use them.</p><p>So many times I saw a student trying to make a box bigger, and they go for <code>width</code> and/or <code>height</code>. Then on bigger screens it will be too small.</p><p>That&#39;s because they wanted a <em>minimum size</em>, not a fixed size.</p><p>If you stop and think, you&#39;ll realize that 95% of the time, you want <code>min-width</code>, <code>max-width</code> and the like.</p><h2 id="zen-interlude" tabindex="-1"><a class="header-anchor" href="#zen-interlude"><span>Zen Interlude</span></a></h2><p>My student, join me in the river, and I shall teach you the art of CSS. CSS stands for Cascading Style Sheets. CSS code flows like the water of a cascade. You need simplicity and flexibility before anything. Punching the water will get you nowhere, whereas redirecting a whole river takes minimal effort.</p><p>Don&#39;t use a bulldozer to pick up a flower. Always go for the most flexible solution. As such, <code>min-width</code> will usually be better than <code>width</code>.</p><h2 id="rule-4-use-the-right-units" tabindex="-1"><a class="header-anchor" href="#rule-4-use-the-right-units"><span>Rule 4 : Use the right units.</span></a></h2><p>There are a lot of units in CSS, but as a beginner you can usually get away with only <code>em</code>, <code>%</code>, and <code>px</code>. Some would add <code>vh</code>, <code>vw</code> and <code>rem</code>, but I don&#39;t think you need them for now.</p><p>What you really need is, rather, knowing perfectly which one from those three (<code>em</code>, <code>%</code>, and <code>px</code>) are the most adapted to the situation. One mistake here can cost you a lot.</p><h2 id="rule-5-mobile-first" tabindex="-1"><a class="header-anchor" href="#rule-5-mobile-first"><span>Rule 5 : Mobile-first.</span></a></h2><p>All beginners want to start with Desktop, and it is a very bad idea.</p><p>Always start designing for the smallest of smartphones, then only go to the larger resolutions.</p><p>How small? 280px wide or less.</p><h2 id="rule-6-use-bem" tabindex="-1"><a class="header-anchor" href="#rule-6-use-bem"><span>Rule 6 : Use BEM</span></a></h2><p>Good naming is one of the hardest things to achieve in programming.</p><p>Using the BEM (Block Element Modifier) methodology will take care of that for you, with the added bonus of a styling convention that will make your code clean and easy to read.</p><h2 id="rule-99-enjoy-yourself" tabindex="-1"><a class="header-anchor" href="#rule-99-enjoy-yourself"><span>Rule 99 : Enjoy yourself !</span></a></h2><p>And stay hydrated !</p>',40)]))}const h=t(i,[["render",r]]),d=JSON.parse('{"path":"/lessons/HowToStartCSS.html","title":"ðŸ˜  How to Start Learning CSS without hating yourself","lang":"en-US","frontmatter":{"title":"ðŸ˜  How to Start Learning CSS without hating yourself","description":"Much CSS, very beginner, so best practices.","footer":"CC-BY-4.0 Licensed | Copyright Â© 2018-present by Samuel Faure <3"},"git":{"updatedTime":1761891624000,"contributors":[{"name":"Samuelfaure","username":"Samuelfaure","email":"samuel.faure.dev@gmail.com","commits":1,"url":"https://github.com/Samuelfaure"}],"changelog":[{"hash":"3e80d8aaf6dc1a00d2b2d49762569040eac3e944","time":1761891624000,"email":"samuel.faure.dev@gmail.com","author":"Samuelfaure","message":"New article: AI dev trap"}]},"filePathRelative":"lessons/HowToStartCSS.md"}');export{h as comp,d as data};
